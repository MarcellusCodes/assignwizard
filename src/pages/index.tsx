import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { api } from "~/utils/api";
import { AddAssignmentForm } from "~/components";

const Home: NextPage = () => {
  const utils = api.useContext();
  const { data: assignments, isLoading: isLoading } =
    api.assignment.getAll.useQuery();
  const addAssignment = api.assignment.add.useMutation({
    onSuccess: async () => {
      await utils.assignment.getAll.invalidate();
    },
  });
  const deleteAssignment = api.assignment.delete.useMutation({
    onSuccess: async () => {
      await utils.assignment.getAll.invalidate();
    },
  });
  const closeAssignment = api.assignment.close.useMutation({
    onSuccess: async () => {
      await utils.assignment.getAll.invalidate();
    },
  });

  const handleAddAssignment = () => {
    addAssignment.mutate({
      title: "Test1",
      description: "This is just a test description for Test1",
      deadline: new Date().toString(),
      protected: false,
      password: "",
    });
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          {isLoading && <div>Loading...</div>}
          {assignments &&
            assignments.map((assignment) => (
              <div
                className=" border-2 border-purple-300 p-6"
                key={assignment.id}
              >
                {assignment.title}
                <span>Open for Entries: {assignment.closed ? "❌" : "✔"}</span>
                <Link
                  className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
                  href={`/assignment/${assignment.id}`}
                >
                  View
                </Link>
                <button
                  onClick={() => {
                    deleteAssignment.mutate({ id: assignment.id });
                  }}
                  className="flex max-w-xs flex-col gap-4 rounded-xl bg-red-600/30 p-4 text-white hover:bg-red-600/20"
                >
                  {deleteAssignment.isLoading ? "Deleting..." : "Delete"}
                </button>
                <button
                  onClick={() => {
                    closeAssignment.mutate({ id: assignment.id });
                  }}
                  className="flex max-w-xs flex-col gap-4 rounded-xl bg-red-600/30 p-4 text-white hover:bg-red-600/20"
                >
                  {closeAssignment.isLoading
                    ? "Closing... Assignment"
                    : "Close"}
                </button>
              </div>
            ))}
          <button onClick={handleAddAssignment}>Add Assignment</button>
          <AddAssignmentForm />
          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();
  console.log(sessionData);

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
