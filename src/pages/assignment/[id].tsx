import { type NextPage } from "next";
import { type GetServerSideProps, type GetServerSidePropsContext } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { api } from "~/utils/api";
import { useDeleteAssignment } from "~/mutations";
import { useRouter } from "next/router";
import { UpdateAssignmentForm } from "~/components";

type TAssignmentView = { id: string };

const AssignmentView: NextPage<TAssignmentView> = ({ id }) => {
  const utils = api.useContext();
  const { data: sessionData } = useSession();
  const { data: assignment, isLoading: isLoading } =
    api.assignment.get.useQuery({ id });
  const deleteAssignment = api.assignment.delete.useMutation({
    onSuccess: async () => {
      await utils.assignment.getAll.refetch();
      await router.push("/");
    },
  });
  const router = useRouter();
  const assignmentUserId = assignment?.userId || null;
  const handleDeleteAssignment = () => {
    deleteAssignment.mutate({ id: assignment?.id });
  };

  /* const editAssignment = api.assignment.edit.useMutation({
    onSuccess: async () => {
      await utils.assignment.get.invalidate({id: assignment?.id});
    },
  }); *

  

  const handleUpdateAssignment = () => {

  }

  

  /* const handleUpdateAssignment = () => {
    addAssignment.mutate({
      title: "Test1",
      description: "This is just a test description for Test1",
      deadline: new Date().toString(),
      protected: false,
      password: "",
    });
  }; */

  return (
    <>
      <Head>
        <title>AssignWizard Assignment ID</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        {isLoading && <div>Loading...</div>}
        {assignment && (
          <div>
            <ul>
              <li>{assignment.id!}</li>
              <li>{assignment.title!}</li>
              <li>{assignment.description!}</li>
              <li>Deadline:{assignment.deadline!.toLocaleDateString()}</li>
            </ul>
            {assignmentUserId === sessionData?.user?.id && (
              <>
                <p>You are eligible to edit this Assignment</p>
                <button onClick={handleDeleteAssignment}>Delete</button>
              </>
            )}
            <UpdateAssignmentForm id={assignment.id!} />
          </div>
        )}

        <button
          className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
          onClick={sessionData ? () => void signOut() : () => void signIn()}
        >
          {sessionData ? "Sign out" : "Sign in"}
        </button>
      </main>
    </>
  );
};

export default AssignmentView;

export const getServerSideProps = (context: GetServerSidePropsContext) => {
  const id = context.params?.id as string;

  return {
    props: {
      id,
    },
  };
};
